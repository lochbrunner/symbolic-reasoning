name: basic
declarations: {}
rules:
  trivial subtraction: a-a => 0
  trivial division: a/a => 1
  trivial multiplication 1: 0*a => 0
  # trivial multiplication 2: 1*a <=> a
  # counting
  counting 2: 1+1 => 2
  counting 3: 1+2 => 3
  # counting down (Could be deduced from above later)
  de-counting 2: 2-1 => 1
  de-counting 3: 3-1 => 2
  de-counting 4: 4-1 => 3
  doubling: a+a <= 2*a
  double negative: a-(0-b) => a+b
  # others
  commutative property 1: a*b => b*a
  commutative property 2: a+b => b+a
  commutative property 3: a-b <=> a+(-1*b)
  associative property 1: a*(b*c) <=> (a*b)*c
  associative property 2: a*(b/c) <=> (a*b)/c
  associative property 3: a+(b+c) <=> (a+b)+c
  associative property 4: a+(b-c) <=> (a+b)-c
  associative property 5: a-(b+c) <=> (a-b)-c # Should we replace this by 'a-(b+c) <=> a+ -1*(b+c)' ?
  associative property 6: a-(b-c) <=> (a-b)+c # See above
  distributive property 1: a*(b+c) <=> a*b+a*c
  distributive property 2: a*(b-c) <=> a*b-a*c
  # neutrals
  neutral sum: a+0 <=> a
  neutral subtraction: a-0 => a
  neutral product: 1*a <=> a
  neutral division 1: a/1 => a
  # neutral division 2: a/a <=> 1   # dangerous: needs trained variable generator
  # division corollaries
  subtract divisions: a/b-c/d <=> (a*d-c*b)/(b*d)
  subtract divisions (corollary): a/b-c <=> (a-c*b)/b
  add divisions: a/b-c/d <=> (a*d-c*b)/(b*d)
  revert division (a!=0 c!=0): a/b = c/d <=> b/a = d/c
  # exponentiation
  square: a*a <=> a^2
  next exponent: a*a^n <= a^(n+1)
  neutral exponent: a^1 => a
  trivial exponent: a^0 => 1
  # equations
  equation 1: a + b = c <=> a = c - b
  equation 1.1: a - b = 0 <=> a = b # corollary from 1
  equation 2: a / b = c <=> a = c*b
  equation 2.1: a / b = 1 => a = b # corollary from 3
  equation commutative: a = b => b = a
  subtraction 1: a - b <=> a + (-b)
problems:
  filename: experiments/basics/problems.spb
