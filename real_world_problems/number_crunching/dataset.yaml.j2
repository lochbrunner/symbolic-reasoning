name: {{name}}
declarations: {}
rules:
  # counting
  {% for i in range(1, upper_limit+1) -%}
  counting {{i}}: 1+{{i-1}} <=> {{i}}
  {% endfor -%}
  # counting down (Could be deduced from above later)
  {% for i in range(1, upper_limit) -%}
  de-counting {{i}}: {{i+1}}-1 <=> {{i}}
  {% endfor -%}
  # additional rules
  associative property 1: a+(b+c) <=> (a+b)+c 
  associative property 2: a+(b-c) <=> (a+b)-c 
  commutative property: a+b => b+a
  commutative property 1: a*b => b*a
  distributive property 1: a*(b+c) <=> a*b+a*c
  neutral product: 1*a => a
  # multiplication
  multiplication: a*b = b + (a-1)*b # -> 1*b = b
premises: [] # no data generation
problems:
  simple addition: 2+3 = 5
  simple multiplication: 2*3 = 6
  # big addition: 24 + 56 = 80
  # big multiplication: 7*8 = 56
files:
  working-folder: experiments
  found-rules: &found-rules experiments/number-crunching/found-rules.yaml
  trainings-data: &bag experiments/number-crunching.bin
  trainings-data-traces: experiments/number-crunching_*.tr
  model: &model experiments/number-crunching.sp
  training-statistics: &training-statistics experiments/number-crunching/training-statistics.yaml
  evaluation-results: experiments/number-crunching/evaluation-results.yaml
generation:
  stages: []
  max-depth: 8
  max-size: 7
  min-working-density: 0.1
  min-result-density: 0.05
  distribution-suppression-exponent: 1.8
  augmentation: 
    enabled: false # Not relevant here
    factor: 10
  blacklist-pattern: []
training:
  save-model: *model
  device: cpu
  # Learning
  num-epochs: 0
  report-rate: 2
  batch-size: 32
  learning-rate: 0.1
  gradient-clipping: 0.1
  model-name: TreeCnnUniqueIndices
  # Scenario
  scenario: bag
  filename: *bag
  statistics: *training-statistics
  model-parameter:
    embedding_size: 24
    hidden_layers: 2
    dropout: 0
    use_props: True
evaluation:
  num_epochs: 30
  problems:
    beam-size: 70
  training-data:
    beam-size: '1:15'
    max-steps: -1
  black-list:
   - 3+2
   - 2+(1+2)
   - 2+(4-1)
   - 3-1+3